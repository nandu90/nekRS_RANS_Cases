C
C  USER SPECIFIED ROUTINES: 
C
C     - boundary conditions 
C     - initial conditions  
C     - variable properties 
C     - forcing function for fluid (f)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.        
C
c-----------------------------------------------------------------------
#include "experimental/rans_komg.f"
      include "/home/nsaini/Nek5000/core/experimental/limits.f"
      include "/home/nsaini/Nek5000/core/experimental/utilities.f"
      include "/home/nsaini/Nek5000/core/experimental/lineplot.f"      
      include'/home/nsaini/Nek5000/core/experimental/portion_post.f'
c---------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
c      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'RANS_KOMG'

      integer ix,iy,iz,eg,e
      real rans_mut,rans_mutsk,rans_mutso,rans_turbPrandtl
      e = gllel(eg)

      Pr_t=coeffs(1)
      mu_t=rans_mut(ix,iy,iz,e)

      utrans = cpfld(ifield,2)
      if(ifield.eq.1) then
        udiff = cpfld(ifield,1)+mu_t
      elseif(ifield.eq.2) then !temperature
        udiff = cpfld(ifield,1)+mu_t*cpfld(ifield,2)/(Pr_t*cpfld(1,2))
      elseif(ifield.eq.3) then !tke
        udiff = cpfld(1,1)+rans_mutsk(ix,iy,iz,e)
      elseif(ifield.eq.4) then !tau
        udiff = cpfld(1,1)+rans_mutso(ix,iy,iz,e)
      endif

      return
      end
c---------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c---------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      e = gllel(eg)

      qvol   = 0.0
      avol   = 0.0
      if(ifield.eq.3) then
        qvol = rans_kSrc(ix,iy,iz,e)
        avol = rans_kDiag(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        qvol = rans_omgSrc(ix,iy,iz,e)
        avol = rans_omgDiag(ix,iy,iz,e)
      endif

      return
      end
c---------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer ix,iy,iz,iside,e,eg
      real tke_tmp,tau_tmp
      
      real uin,vin,win,t1in,t2in,t3in
      common /inarrs/ 
     $     uin(lx1,ly1,lz1,lelv),
     $     vin(lx1,ly1,lz1,lelv),
     $     win(lx1,ly1,lz1,lelv),
     $     t1in(lx1,ly1,lz1,lelv),
     $     t2in(lx1,ly1,lz1,lelv),
     $     t3in(lx1,ly1,lz1,lelv)

      e = gllel(eg)

      ux   = uin(ix,iy,iz,e)
      uy   = vin(ix,iy,iz,e)
      uz   = win(ix,iy,iz,e)
            
      if(cbc(iside,e,1).eq.'W  ')then
         temp = 0.0
      elseif(cbc(iside,e,1).eq.'v  ')then
         if(ifield.eq.3)then
            temp = t2in(ix,iy,iz,e)
         elseif(ifield.eq.4)then
            temp = t3in(ix,iy,iz,e)
         elseif(ifield.eq.2)then
            temp = t1in(ix,iy,iz,e)
         endif
      endif

      return
      end
c---------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real kmax
      
      ux   = 0.0  
      uy   = 0.1 
      uz   = 0.0
            
      if (ifield.eq.2) then
         temp = 0.01
      elseif (ifield.eq.3) then
         temp = 0.0001
      elseif (ifield.eq.4) then
         temp = 0.0001
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      
      integer elist
      common /imy_fld/ elist(lelv)
      
      real w1,w2,w3,w4,w5
      common /SCRNS/
     & w1(lx1*ly1*lz1*lelv)
     &,w2(lx1*ly1*lz1*lelv)
     &,w3(lx1*ly1*lz1*lelv)
     &,w4(lx1*ly1*lz1*lelv)
     &,w5(lx1*ly1*lz1*lelv)
      
      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)
      real m1,d

      real norm(3),pt(3),eps

      nxyz = lx1*ly1*lz1
      ntot = nxyz*nelv
      ntott = ntot*ldimt

      if(istep.eq.0)then
         call inletprofiles         
      endif
      
c     Outflow
      rq = 4.0
      ui = 0.0
      call turb_outflow(d,m1,rq,ui)
            
      
      if(mod(istep,100).eq.0)then
         call print_limits
         call y_p_limits(wd,.true.)
         norm(1) = 0.0
         norm(2) = 1.0
         norm(3) = 0.0
         pt(1) = 0.0
         pt(2) = 0.0
         pt(3) = 0.0
         eps = 0.02
         umean = planar_ave_m1(vy,norm,pt,eps)
         if(nio.eq.0)then
            write(6,'(a15,es13.4)') "umean:",umean
            write(6,*)
         endif
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl        ! Set thermal divergence

      call userqtl_scig 

      return
      end
c---------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      n=nx1*ny1*nz1*nelv
     
      do iel=1,nelt
      do ifc=1,2*ndim
         id_face = bc(5,ifc,iel,1)
         if (id_face.eq.1) then         ! inlet 
             cbc(ifc,iel,1) = 'v  '
             cbc(ifc,iel,2) = 't  '
             cbc(ifc,iel,3) = 't  '
             cbc(ifc,iel,4) = 't  '
         elseif (id_face.eq.2) then     ! outlet 
             cbc(ifc,iel,1) = 'O  '
             cbc(ifc,iel,2) = 'O  '
             cbc(ifc,iel,3) = 'O  '
             cbc(ifc,iel,4) = 'O  '
         elseif (id_face.eq.3) then     ! wall 
             cbc(ifc,iel,1) = 'W  '
             cbc(ifc,iel,2) = 't  '
             cbc(ifc,iel,3) = 't  '
             cbc(ifc,iel,4) = 't  '
          endif
       enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      real wd(lx1,ly1,lz1,lelv)
      common /walldist/ wd

      logical ifcoefs

C     initialize the RANS model
      ifld_k = 3 !address of tke
      ifld_t = 4 !address of tau
      ifcoefs = .false.

C     Supported models:
c     id_m = 0 !regularized high-Re k-omega (no wall functions)
c     id_m = 1 !regularized low-Re k-omega
c     id_m = 2 !regularized high-Re k-omega SST (no wall functions)
c     id_m = 3 !regularized low-Re k-omega SST
      id_m = 4 !standard k-tau

C     Wall distance function:
c     id_w = 0 ! user specified
c     id_w = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
      id_w = 2 ! distf (coordinate difference, provides smoother function)

      call rans_init(ifld_k,ifld_t,ifcoefs,coefs,id_w,wd,id_m)

c      ifflow = .false.
c      ifheat = .false.

      return
      end
c-----------------------------------------------------------------------
      subroutine inletprofiles
c     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e
      real vel,tke,tau

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      common /fitters/  ufit(10),kfit1(10),kfit2(10),taufit(10)
      real ufit,kfit1,kfit2,taufit

      integer icalld
      save icalld
      data icalld /0/

      real uin,vin,win,t1in,t2in,t3in
      common /inarrs/ 
     $     uin(lx1,ly1,lz1,lelv),
     $     vin(lx1,ly1,lz1,lelv),
     $     win(lx1,ly1,lz1,lelv),
     $     t1in(lx1,ly1,lz1,lelv),
     $     t2in(lx1,ly1,lz1,lelv),
     $     t3in(lx1,ly1,lz1,lelv)

      nxyz = lx1*ly1*lz1
      ntot = nxyz*nelt

      if(icalld .eq. 0)then
         open(10,file='ufit.dat',status='old',action='read')
         open(11,file='kfit1.dat',status='old',action='read')
         open(12,file='kfit2.dat',status='old',action='read')
         open(13,file='taufit.dat',status='old',action='read')

         do i=1,10
            read(10,*)ufit(i)
            read(11,*)kfit1(i)
            read(12,*)kfit2(i)
            read(13,*)taufit(i)
         enddo

         close(10)
         close(11)
         close(12)
         close(13)
         icalld = 1
      
         do i=1,ntot
            walld = wd(i,1,1,1)
            
            uin(i,1,1,1) = 0.0
            vin(i,1,1,1) = polyval(ufit,walld)
            vin(i,1,1,1) = min(vin(i,1,1,1),0.0)
            win(i,1,1,1) = 0.0

            if(walld.gt.0.02)then
               tke = polyval(kfit1,walld)
            else
               tke = polyval(kfit2,walld)
            endif
            tke = max(tke,0.0)
            t2in(i,1,1,1) = tke
            
            tau = polyval(taufit,walld)
            tau = max(tau,0.0)
            t3in(i,1,1,1) = tau

            t1in(i,1,1,1) = walld
         enddo
      endif

      return
      end
c---------------------------------------------------------------------
      real function polyval(p,x)

      real p(10),x

      polyval = p(1)*x**9.+p(2)*x**8.+p(3)*x**7.+p(4)*x**6.+
     $     p(5)*x**5.+p(6)*x**4.+p(7)*x**3.+p(8)*x**2.+p(9)*x+p(10)

      end function
c---------------------------------------------------------------------
