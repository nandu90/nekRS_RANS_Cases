C
C  USER SPECIFIED ROUTINES: 
C
C     - boundary conditions 
C     - initial conditions  
C     - variable properties 
C     - forcing function for fluid (f)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.        
C
c-----------------------------------------------------------------------
      include "/ccs/home/nsaini/Nek5000/core/experimental/limits.f"
      include "/ccs/home/nsaini/Nek5000/core/experimental/utilities.f"
      include "/ccs/home/nsaini/Nek5000/core/experimental/lineplot.f"      
      include'/ccs/home/nsaini/Nek5000/core/experimental/portion_post.f'
c---------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real kmax
      
      ux   = 0.0  
      uy   = 0.1 
      uz   = 0.0
            
      if (ifield.eq.2) then
         temp = 0.01
      elseif (ifield.eq.3) then
         temp = 0.0001
      elseif (ifield.eq.4) then
         temp = 0.0001
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      
      integer elist
      common /imy_fld/ elist(lelv)
      
      real w1,w2,w3,w4,w5
      common /SCRNS/
     & w1(lx1*ly1*lz1*lelv)
     &,w2(lx1*ly1*lz1*lelv)
     &,w3(lx1*ly1*lz1*lelv)
     &,w4(lx1*ly1*lz1*lelv)
     &,w5(lx1*ly1*lz1*lelv)
      
      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)
      
      real nrsdt(1)
      save nrsdt

      common /NRSSCPTR/ nrs_scptr(10)
      integer*8 nrs_scptr

      real uin,vin,win,tin
      common /inarrs/ 
     $     uin(lx1*ly1*lz1*lelv),
     $     vin(lx1*ly1*lz1*lelv),
     $     win(lx1*ly1*lz1*lelv),
     $     t1in(lx1*ly1*lz1*lelv),
     $     t2in(lx1*ly1*lz1*lelv),
     $     t3in(lx1*ly1*lz1*lelv)
     
      real norm(3),pt(3),eps

      nxyz = lx1*ly1*lz1
      ntot = nxyz*nelv
      ntott = ntot*ldimt

c     Fix needed for a lack of a pointer to dt from nekRS
      nrs_scptr(1) = loc(nrsdt(1))
      dt = nrsdt(1)

      if(istep.eq.0)then
         call distf(wd,1,'W  ',w1,w2,w3,w4,w5)
         call inletprofiles         
      endif
      nrs_scptr(2) = loc(uin(1))
      nrs_scptr(3) = loc(vin(1))
      nrs_scptr(4) = loc(win(1))
      nrs_scptr(5) = loc(t1in(1))
      nrs_scptr(6) = loc(t2in(1))
      nrs_scptr(7) = loc(t3in(1))
            

      if(istep.eq.0)then
c     Fix for vtrans and vdiff not being populated
c     Needed for y_p_limits
         Re=1./param(2)
         visc = 1./Re
         rho = 1.0
         call rone(vtrans(1,1,1,1,1),ntot)
         call rone(vdiff(1,1,1,1,1),ntot)
         call cmult(vdiff(1,1,1,1,1),visc,ntot)
      endif
      if(istep.gt.0)then
         call print_limits
         call y_p_limits(wd,.true.)
         norm(1) = 0.0
         norm(2) = 1.0
         norm(3) = 0.0
         pt(1) = 0.0
         pt(2) = 0.0
         pt(3) = 0.0
         eps = 0.02
         umean = planar_ave_m1(vy,norm,pt,eps)
         if(nio.eq.0)then
            write(6,'(a15,es13.4)') "umean:",umean
            write(6,*)
         endif
      endif

c$$$      if(istep.eq.0)then
c$$$         call izero(elist,nelv)
c$$$         
c$$$         do ie=1,nelv
c$$$            xmax = vlmax(xm1(1,1,1,ie),ntot)
c$$$            zmax = vlmax(zm1(1,1,1,ie),ntot)
c$$$            if(zmax.gt.0. .and. xmax.gt.0.)elist(ie) = 1
c$$$         enddo
c$$$      endif
c$$$
c$$$      if(istep.gt.0)then
c$$$         call my_outpost(elist,vx,vy,vz,pr,t,'part')
c$$$      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      real w1,w2,w3,w4,w5
      common /SCRNS/
     $     w1(lx1,ly1,lz1,lelv),
     $     w2(lx1,ly1,lz1,lelv),
     $     w3(lx1,ly1,lz1,lelv),
     $     w4(lx1,ly1,lz1,lelv),
     $     w5(lx1,ly1,lz1,lelv)

      n=nx1*ny1*nz1*nelv
     
      do iel=1,nelt
      do ifc=1,2*ndim
         id_face = bc(5,ifc,iel,1)
         if (id_face.eq.1) then         ! inlet 
             cbc(ifc,iel,1) = 'v  '
             cbc(ifc,iel,2) = 't  '
             cbc(ifc,iel,3) = 't  '
             cbc(ifc,iel,4) = 't  '
         elseif (id_face.eq.2) then     ! outlet 
             cbc(ifc,iel,1) = 'o  '
             cbc(ifc,iel,2) = 'o  '
             cbc(ifc,iel,3) = 'o  '
             cbc(ifc,iel,4) = 'o  '
         elseif (id_face.eq.3) then     ! wall 
             cbc(ifc,iel,1) = 'W  '
             cbc(ifc,iel,2) = 't  '
             cbc(ifc,iel,3) = 't  '
             cbc(ifc,iel,4) = 't  '
          endif
          boundaryID(ifc,iel) = 0
          boundaryIDt(ifc,iel) = 0
          
          if(cbc(ifc,iel,3).eq.'t  ')then
             if(cbc(ifc,iel,1).eq.'v') boundaryIDt(ifc,iel)=1
             if(cbc(ifc,iel,1).eq.'W') boundaryIDt(ifc,iel)=2
          elseif(cbc(ifc,iel,3).eq.'o  ')then
             boundaryIDt(ifc,iel)=3
          endif
          
          if(cbc(ifc,iel,1).eq.'v ')boundaryID(ifc,iel)=1
          if(cbc(ifc,iel,1).eq.'W ')boundaryID(ifc,iel)=2
          if(cbc(ifc,iel,1).eq.'o ')boundaryID(ifc,iel)=3
       enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine inletprofiles
c     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e
      real vel,tke,tau

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      common /fitters/  ufit(10),kfit1(10),kfit2(10),taufit(10)
      real ufit,kfit1,kfit2,taufit

      integer icalld
      save icalld
      data icalld /0/

      real uin,vin,win,tin
      common /inarrs/ 
     $     uin(lx1*ly1*lz1*lelv),
     $     vin(lx1*ly1*lz1*lelv),
     $     win(lx1*ly1*lz1*lelv),
     $     t1in(lx1*ly1*lz1*lelv),
     $     t2in(lx1*ly1*lz1*lelv),
     $     t3in(lx1*ly1*lz1*lelv)

      nxyz = lx1*ly1*lz1
      ntot = nxyz*nelt

      if(icalld .eq. 0)then
         open(10,file='ufit.dat',status='old',action='read')
         open(11,file='kfit1.dat',status='old',action='read')
         open(12,file='kfit2.dat',status='old',action='read')
         open(13,file='taufit.dat',status='old',action='read')

         do i=1,10
            read(10,*)ufit(i)
            read(11,*)kfit1(i)
            read(12,*)kfit2(i)
            read(13,*)taufit(i)
         enddo

         close(10)
         close(11)
         close(12)
         close(13)
         icalld = 1
      
         do i=1,ntot
            walld = wd(i,1,1,1)
            
            uin(i) = 0.0
            vin(i) = polyval(ufit,walld)
            vin(i) = min(vin(i),0.0)
            win(i) = 0.0

            if(walld.gt.0.02)then
               tke = polyval(kfit1,walld)
            else
               tke = polyval(kfit2,walld)
            endif
            tke = max(tke,0.0)
            t2in(i) = tke
            
            tau = polyval(taufit,walld)
            tau = max(tau,0.0)
            t3in(i) = tau

            t1in(i) = walld
         enddo
      endif

      return
      end
c---------------------------------------------------------------------
      real function polyval(p,x)

      real p(10),x

      polyval = p(1)*x**9.+p(2)*x**8.+p(3)*x**7.+p(4)*x**6.+
     $     p(5)*x**5.+p(6)*x**4.+p(7)*x**3.+p(8)*x**2.+p(9)*x+p(10)

      end function
c---------------------------------------------------------------------
